function [pt2fXY_YZ_1, pt2fXY_YZ_2,...
          pt2fXY_XZ_1, pt2fXY_XZ_2, ...
          pt2fXZ_YZ_1, pt2fXZ_YZ_2,...
          pt2fXZ_XY_1, pt2fXZ_XY_2,...
          pt2fYZ_XY_1, pt2fYZ_XY_2,...
          pt2fYZ_XZ_1, pt2fYZ_XZ_2]= fnComputeCrossSectionIntersections()
global  g_strctModule       

% XY crosshairs:
[pt2fXY_YZ_1, pt2fXY_YZ_2] = fnCrossSectionIntersection(...
    g_strctModule.m_strctCrossSectionXY, g_strctModule.m_strctCrossSectionYZ);

[pt2fXY_XZ_1, pt2fXY_XZ_2] = fnCrossSectionIntersection(...
    g_strctModule.m_strctCrossSectionXY, g_strctModule.m_strctCrossSectionXZ);

% XZ crosshairs:
[pt2fXZ_YZ_1, pt2fXZ_YZ_2] = fnCrossSectionIntersection(...
    g_strctModule.m_strctCrossSectionXZ, g_strctModule.m_strctCrossSectionYZ);

[ pt2fXZ_XY_1, pt2fXZ_XY_2] = fnCrossSectionIntersection(...
    g_strctModule.m_strctCrossSectionXZ, g_strctModule.m_strctCrossSectionXY);


% YZ crosshairs:
[ pt2fYZ_XY_1, pt2fYZ_XY_2] = fnCrossSectionIntersection(...
    g_strctModule.m_strctCrossSectionYZ, g_strctModule.m_strctCrossSectionXY);
[ pt2fYZ_XZ_1, pt2fYZ_XZ_2] = fnCrossSectionIntersection(...
    g_strctModule.m_strctCrossSectionYZ,g_strctModule.m_strctCrossSectionXZ);
return;   